)
times <- seq(1, 324, by = 1)
# beta_weekly = generate_fluctuation_random_walk(times)
parms$beta_weekly = readRDS("/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/beta_weekly_spline_2.RDS")
#parms$beta_weekly = beta_weekly
initial_conditions <- rep(0, 12)
initial_conditions[1] <- 1 - parms$I0 - parms$A0 - parms$R10 - parms$R20 - parms$Sprime0
initial_conditions[2] <- parms$I0
initial_conditions[3] <- parms$A0
initial_conditions[4] <- parms$Sprime0
initial_conditions[5] <- parms$R10
initial_conditions[6] <- parms$R20
initial_conditions[7:12] <- 0
results = run_seiar_model(parms, initial_conditions, times )
#saveRDS(results, file = "/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/ODEresults_simulated_spline_2.RDS")
### check simulated data
custom_colors <- c(
"S" = "#1f77b4",  # blue
"I" = "#ff7f0e",  # orange
"A" = "#2ca02c",  # green
"Sprime" = "#d62728",  # red
"R1" = "#9467bd",  # purple
"R2" = "#8c564b",  # brown
"Iv" = "#e377c2",  # pink
"Av" = "#7f7f7f",  # gray
"Sprimev" = "#bcbd22",  # yellow-green
"R1v" = "#17becf", # teal
"R2v" = "#9edae5",  # light blue
"Q" = "black"
)
results_long <- melt(results, id.vars = "time")
A <- ggplot(results ) +
geom_line(aes(x = time, y = `12`*parms$popsize)) +
labs(title = "SIARRS Model Output", x = "Time (days)", y = "Number of Individuals in Q") +
theme_minimal() +
scale_color_manual(values = custom_colors) +
theme(
text = element_text(size = 14),  # Changes the base size of all text elements
plot.title = element_text(size = 16, face = "bold"),  # Specific for plot title
axis.title = element_text(size = 14),  # Specific for axis titles
axis.text = element_text(size = 12),  # Specific for axis text
legend.title = element_text(size = 14),  # Specific for legend title
legend.text = element_text(size = 12)
)
B <- ggplot(results) +
geom_line( aes(x = time, y = `1`, col = "S")) +
geom_line( aes(x = time, y = `2`, col = "I")) +
geom_line( aes(x = time, y = `3`, col = "A")) +
geom_line( aes(x = time, y = `4`, col = "Sprime")) +
geom_line( aes(x = time, y = `5`, col = "R1")) +
geom_line( aes(x = time, y = `6`, col = "R2")) +
geom_line( aes(x = time, y = `7`, col = "Iv")) +
geom_line( aes(x = time, y = `8`, col = "Av")) +
geom_line( aes(x = time, y = `9`, col = "Sprimev")) +
geom_line( aes(x = time, y = `10`, col = "R1v")) +
geom_line( aes(x = time, y = `11`, col = "R2v")) +
labs(title = "SIARRS Model Output", x = "Time (days)", y = "Number of Individuals") +
theme_minimal() +
scale_color_manual(values = custom_colors) +
theme(
text = element_text(size = 14),  # Changes the base size of all text elements
plot.title = element_text(size = 16, face = "bold"),  # Specific for plot title
axis.title = element_text(size = 14),  # Specific for axis titles
axis.text = element_text(size = 12),  # Specific for axis text
legend.title = element_text(size = 14),  # Specific for legend title
legend.text = element_text(size = 12)
) #+
#scale_y_log10()
A
B
plot(parms$beta_weekly)
# save the random beta_weekly
#saveRDS(beta_weekly, file = "/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/beta_weekly")
# Generate the data for inference
set.seed(2412)
non_cholera <- random_walk(times, BM_sd = parms$AWD_sd)
#saveRDS(non_cholera, file = "/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/non_cholera_asym.RDS")
cholera_inc <- c(0, diff(results[,13]*parms$popsize)) * parms$pi_1  # Assuming column 12 has the relevant data
AWD_simulated <- rep(NA, length(times))
testing_positivity <- rep(NA, length(times))
for (i in 1:length(times)) {
# analyse likelihood
# number of positive tests
AWD_simulated[i] <- rpois(1, cholera_inc[i] + non_cholera[i] )
# number of negative tests
testing_positivity[i] <- parms$sensitivity*(cholera_inc[i]/(cholera_inc[i] + non_cholera[i])) + (1-parms$specificity)*(cholera_inc[i]/(cholera_inc[i] + non_cholera[i]))
}
# plot result of the testing process
testing_data <- data.frame(week = times, AWD_simulated = AWD_simulated, testing_positivity = testing_positivity,
RDT_plus = cholera_inc)
testing_data$AWD_RDT = NA
testing_data$RDT_plus = NA
for (i in 1:length(times)){
testing_data$AWD_RDT[i] = rbinom(1,size=testing_data$AWD_simulated[i], prob=0.5)
testing_data$RDT_plus[i] = rbinom(1, size = testing_data$AWD_RDT[i], prob = testing_data$testing_positivity[i])
}
plot(testing_positivity)
plot(AWD_simulated)
plot(cholera_inc)
saveRDS(testing_data, file = "/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/simulated_data_asym.RDS")
params
# load libraries
library(tidyverse)
library(MASS)
library(reshape2)
library(reshape)
library(deSolve)
# functions for running ODEs
random_walk <- function(t, BM_sd = 7  ) {
# Calculate the number of steps
n <- length(t)
# Generate random increments: normal distribution with mean = 0 and standard deviation = BM_sd
increments <- rnorm(n, mean = 0, sd = (BM_sd))
# Perform the random walk on a logarithmic scale by taking the cumulative product of exponentiated increments
walk_log <- cumsum((increments))
# Optionally, normalize the walk to start at 1 or another starting value
walk <- floor( abs(min(walk_log)) + (walk_log))
# Return the random walk values
return(walk)
}
seiar_ode <- function(t, y, parms ) {
with(as.list(c(y, parms)), {
# Extract parameters from parms list
knots <- parms$knots
a <- parms$a
b_hat <- parms$b_hat
order <- parms$order
rho <- parms$rho
alpha <- parms$alpha
omega_1 <- parms$omega_1
omega_2 <- parms$omega_2
mu_D <- parms$mu_D
mu_I <- parms$mu_I
mu_B <- parms$mu_B
mu_B2 <- parms$mu_B2
gamma_A <- parms$gamma_A
gamma_I <- parms$gamma_I
q <- parms$q
phi_0 <- parms$phi_0
phi_1 <- parms$phi_1
phi_2 <- parms$phi_2
dydt <- numeric(length(y))
beta <- parms$beta_weekly[floor(t)]
alpha_now <- parms$alpha[floor(t)+1]
# Extract compartment values
S <- y[1]
I <- y[2]
A <- y[3]
Sprime <- y[4]
R1 <- y[5]
R2 <- y[6]
Iv <- y[7]
Av <- y[8]
Sprimev <- y[9]
R1v <- y[10]
R2v <- y[11]
# Compute the derivatives for each compartment
dydt[1] <- -alpha_now * S - beta * S * (I + Iv + q * (A + Av)) + mu_B * S / (S + I + A + Sprime + R1 + R2) - mu_D * S #+ mu_B2*(S + I + A + Sprime + R1 + R2+ Iv + Av + Sprimev + R1v + R2v)
dydt[2] <- beta * (1 - rho) * (I + Iv + q * (A + Av)) * (S + phi_0 * Sprime + phi_1 * R1 + phi_2 * R2) - (mu_I + gamma_I) * I + mu_B * I / (S + I + A + Sprime + R1 + R2)
dydt[3] <- -alpha_now * A + beta * rho * (I + Iv + q * (A + Av)) * (S + phi_0 * Sprime + phi_1 * R1 + phi_2 * R2) - (mu_D + gamma_A) * A + mu_B * A / (S + I + A + Sprime + R1 + R2)
dydt[4] <- -alpha_now * Sprime - beta * phi_0 * Sprime * (I + Iv + q * (A + Av)) - mu_D * Sprime + mu_B * Sprime / (S + I + A + Sprime + R1 + R2) + omega_1 * R1
dydt[5] <- -alpha_now * R1 - beta * phi_1 * R1 * (I + Iv + q * (A + Av)) + gamma_A * A - (omega_1 + mu_D) * R1 + mu_B * R1 / (S + I + A + Sprime + R1 + R2) + omega_2 * R2
dydt[6] <- -alpha_now * R2 - beta * phi_2 * R2 * (I + Iv + q * (A + Av)) + gamma_I * I - (omega_2 + mu_D) * R2 + mu_B * R2 / (S + I + A + Sprime + R1 + R2)
# Vaccinated compartments
dydt[7] <- beta * (1 - rho) * (phi_0 * Sprimev + phi_1 * R1v + phi_2 * R2v) * (I + Iv + q * (A + Av)) - (mu_I + gamma_I) * Iv
dydt[8] <- alpha_now * A + beta * rho * (phi_0 * Sprimev + phi_1 * R1v + phi_2 * R2v) * (I + Iv + q * (A + Av)) - (gamma_A + mu_D) * Av
dydt[9] <- alpha_now * S - beta * phi_0 * Sprimev * (I + Iv + q * (A + Av)) - mu_D * Sprimev + omega_1 * R1v
dydt[10] <- alpha_now * Sprime - beta * phi_1 * R1v * (I + Iv + q * (A + Av)) + gamma_A * Av + omega_2 * R2v - (omega_1 + mu_D) * R1v
dydt[11] <- alpha_now * (R1 + R2) - beta * phi_2 * R2v * (I + Iv + q * (A + Av)) + gamma_I * Iv - (omega_2 + mu_D) * R2v
# Additional compartment to calculate incidence
dydt[12] <- beta * (1 - rho) * (I + Iv + q * (A + Av)) * (S + phi_0 * (Sprime + Sprimev) + phi_1 * (R1 + R1v) + phi_2 * (R2 + R2v))
return(list(dydt))
})
}
run_seiar_model <- function(parms, initial_conditions, times ) {
# The ODE function expects certain names to be directly available in the parms list.
# Solve the ODE
ode_out <- ode(
y = initial_conditions,
times = times,
func = seiar_ode,
parms = parms,
method = "ode45",
rtol = 1e-10,
atol = 1e-10
)
return(ode_out)
}
# Function to generate values fluctuating around 600
generate_fluctuation_random_walk <- function(time_points) {
amplitude <- 50  # The maximum deviation from 600
baseline <- 600  # The central value around which the fluctuation occurs
frequency <- 2 * pi / 26  # Frequency of oscillation (every 26 time points)
random_walk <- cumsum(rnorm(length(time_points), mean = 0, sd = 5))  # Random walk component
fluctuation <- baseline + amplitude * sin(frequency * time_points) + random_walk
return(fluctuation)
}
# set parameters for simulation
parms <- list(
rho = 0.99,
gamma_A = 3.5,
gamma_I = 3.5,
omega_1 = 0.05,
omega_2 = 0.006392694,
mu_I = 0.012,
mu_B = 0.004083202,
mu_D = 0.004095422,
mu_B2 = 0,#.001,
phi_0 = 0.25,
phi_1 = 0.5,
phi_2 = 0.75,
alpha = c(rep(0, 216 - 1 ), 0.4 , rep(0, 324 - 216) ),
popsize = 350000,
I0 = 0.0001,
A0 = 0.01,
R10 = 0.1,
R20 = 0.3,
Sprime0 = 0.4,
pi_1 = 0.5,
sensitivity = 0.89,
specificity = 0.98,
AWD_sd = log(10),
q = 0 #1/100
)
times <- seq(1, 324, by = 1)
# beta_weekly = generate_fluctuation_random_walk(times)
parms$beta_weekly = readRDS("/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/beta_weekly_spline_2.RDS")
#parms$beta_weekly = beta_weekly
initial_conditions <- rep(0, 12)
initial_conditions[1] <- 1 - parms$I0 - parms$A0 - parms$R10 - parms$R20 - parms$Sprime0
initial_conditions[2] <- parms$I0
initial_conditions[3] <- parms$A0
initial_conditions[4] <- parms$Sprime0
initial_conditions[5] <- parms$R10
initial_conditions[6] <- parms$R20
initial_conditions[7:12] <- 0
results = run_seiar_model(parms, initial_conditions, times )
#saveRDS(results, file = "/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/ODEresults_simulated_spline_2.RDS")
### check simulated data
custom_colors <- c(
"S" = "#1f77b4",  # blue
"I" = "#ff7f0e",  # orange
"A" = "#2ca02c",  # green
"Sprime" = "#d62728",  # red
"R1" = "#9467bd",  # purple
"R2" = "#8c564b",  # brown
"Iv" = "#e377c2",  # pink
"Av" = "#7f7f7f",  # gray
"Sprimev" = "#bcbd22",  # yellow-green
"R1v" = "#17becf", # teal
"R2v" = "#9edae5",  # light blue
"Q" = "black"
)
results_long <- melt(results, id.vars = "time")
A <- ggplot(results ) +
geom_line(aes(x = time, y = `12`*parms$popsize)) +
labs(title = "SIARRS Model Output", x = "Time (days)", y = "Number of Individuals in Q") +
theme_minimal() +
scale_color_manual(values = custom_colors) +
theme(
text = element_text(size = 14),  # Changes the base size of all text elements
plot.title = element_text(size = 16, face = "bold"),  # Specific for plot title
axis.title = element_text(size = 14),  # Specific for axis titles
axis.text = element_text(size = 12),  # Specific for axis text
legend.title = element_text(size = 14),  # Specific for legend title
legend.text = element_text(size = 12)
)
B <- ggplot(results) +
geom_line( aes(x = time, y = `1`, col = "S")) +
geom_line( aes(x = time, y = `2`, col = "I")) +
geom_line( aes(x = time, y = `3`, col = "A")) +
geom_line( aes(x = time, y = `4`, col = "Sprime")) +
geom_line( aes(x = time, y = `5`, col = "R1")) +
geom_line( aes(x = time, y = `6`, col = "R2")) +
geom_line( aes(x = time, y = `7`, col = "Iv")) +
geom_line( aes(x = time, y = `8`, col = "Av")) +
geom_line( aes(x = time, y = `9`, col = "Sprimev")) +
geom_line( aes(x = time, y = `10`, col = "R1v")) +
geom_line( aes(x = time, y = `11`, col = "R2v")) +
labs(title = "SIARRS Model Output", x = "Time (days)", y = "Number of Individuals") +
theme_minimal() +
scale_color_manual(values = custom_colors) +
theme(
text = element_text(size = 14),  # Changes the base size of all text elements
plot.title = element_text(size = 16, face = "bold"),  # Specific for plot title
axis.title = element_text(size = 14),  # Specific for axis titles
axis.text = element_text(size = 12),  # Specific for axis text
legend.title = element_text(size = 14),  # Specific for legend title
legend.text = element_text(size = 12)
) #+
#scale_y_log10()
A
B
plot(parms$beta_weekly)
# save the random beta_weekly
#saveRDS(beta_weekly, file = "/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/beta_weekly")
# Generate the data for inference
set.seed(2412)
non_cholera <- random_walk(times, BM_sd = parms$AWD_sd)
#saveRDS(non_cholera, file = "/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/non_cholera_asym.RDS")
cholera_inc <- c(0, diff(results[,13]*parms$popsize)) * parms$pi_1  # Assuming column 12 has the relevant data
AWD_simulated <- rep(NA, length(times))
testing_positivity <- rep(NA, length(times))
for (i in 1:length(times)) {
# analyse likelihood
# number of positive tests
AWD_simulated[i] <- rpois(1, cholera_inc[i] + non_cholera[i] )
# number of negative tests
testing_positivity[i] <- parms$sensitivity*(cholera_inc[i]/(cholera_inc[i] + non_cholera[i])) + (1-parms$specificity)*(cholera_inc[i]/(cholera_inc[i] + non_cholera[i]))
}
# plot result of the testing process
testing_data <- data.frame(week = times, AWD_simulated = AWD_simulated, testing_positivity = testing_positivity,
RDT_plus = cholera_inc)
testing_data$AWD_RDT = NA
testing_data$RDT_plus = NA
for (i in 1:length(times)){
testing_data$AWD_RDT[i] = rbinom(1,size=testing_data$AWD_simulated[i], prob=0.5)
testing_data$RDT_plus[i] = rbinom(1, size = testing_data$AWD_RDT[i], prob = testing_data$testing_positivity[i])
}
plot(testing_positivity)
plot(AWD_simulated)
plot(cholera_inc)
saveRDS(testing_data, file = "/Users/jb22m516/Documents/GitHub/uvira-modeling/data/simulated/simulated_data_asym.RDS")
parms <- list(
rho = 0.99,
gamma_A = 3.5,
gamma_I = 3.5,
omega_1 = 0.05,
omega_2 = 0.006392694,
mu_I = 0.012,
mu_B = 0.004083202,
mu_D = 0.0042,
mu_B2 = 0.005,#.001,
phi_1 = 0.3,
phi_2 = 0.5,
alpha = c(rep(0, 216 - 1 ), 0.8 , rep(0, 324 - 216) ),
popsize = 350000,
I0 = 0.0001,
A0 = 0.01,
R10 = 0.3,
R20 = 0.005,
pi_1 = 0.5,
sensitivity = 0.89,
specificity = 0.98,
AWD_sd = log(10),
q = 0.01 #1/100
)
times <- seq(1, 324, by = 1)
# Get initial conditions
initial_conditions <- rep(0, 10)
initial_conditions[1] <- 1 - parms$I0 - parms$A0 - parms$R10 - parms$R20
initial_conditions[2] <- parms$I0
initial_conditions[3] <- parms$A0
initial_conditions[4] <- parms$R10
initial_conditions[5] <- parms$R20
initial_conditions[6:10] <- 0
b = 2
#install.packages("utils")
library(utils)
?c
#| eval: false
browseURL(paste0("https://cran.r-project.org/package=", "packageName"))
# Install package
install.packages("pacman")
install.packages("pacman")
library(pacman)
pacman::p_load(tidyverse, haven, table1, readxl, writexl, labelled, summarytools)
nhanes <- read_excel(file.path(d_data, "nhanes_for_R.xlsx"))
#| label: setup directory
#| eval: false
#| echo: true
# Set the project root directory
d_proj <- getwd()
# Basic folders
# Directory for original data
d_oridata <- file.path(d_proj, "01_oridata")
# Directory for edited data
d_data <- file.path(d_proj, "02_data")
# Directory for R scripts
d_code <- file.path(d_proj, "03_code")
# Directory for R output
d_output <- file.path(d_proj, "04_output")
## This code below creates the folders in case you haven't set them up yet
# Create a vector with all directories
dirs <- c(d_oridata, d_data, d_code, d_output)
# Loop through the directories and create them if they don't exist
for (dir in dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE)
}
}
#| label: load directories
#| eval: false
#| echo: true
nhanes <- read_excel(file.path(d_data, "nhanes_for_R.xlsx"))
getwd()
setwd("/Users/jb22m516/Documents/GitHub/getting_started_with_R/")
#| label: load directories
#| eval: false
#| echo: true
nhanes <- read_excel(file.path(d_data, "nhanes_for_R.xlsx"))
setwd("/Users/jb22m516/Documents/GitHub/getting_started_with_R/exercises/")
#| label: setup directory
#| eval: false
#| echo: true
# Set the project root directory
d_proj <- getwd()
# Basic folders
# Directory for original data
d_oridata <- file.path(d_proj, "01_oridata")
# Directory for edited data
d_data <- file.path(d_proj, "02_data")
# Directory for R scripts
d_code <- file.path(d_proj, "03_code")
# Directory for R output
d_output <- file.path(d_proj, "04_output")
## This code below creates the folders in case you haven't set them up yet
# Create a vector with all directories
dirs <- c(d_oridata, d_data, d_code, d_output)
# Loop through the directories and create them if they don't exist
for (dir in dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE)
}
}
nhanes <- read_excel(file.path(d_data, "nhanes_for_R.xlsx"))
nhanes
?read_excel
library(readxl)
# option 3: This will open the dataset in a separate window with the first couple of hundered of rows and
view(nhanes)
d_data
nhanes <- read_excel(file.path(d_data, "nhanes_for_R.xlsx"))
file.path()
getwd()
nhanes <- read_excel( "/02_oridata/hanes_for_R.xlsx")
setwd("/Users/jb22m516/Documents/GitHub/getting_started_with_R/exercises/")
#| label: load directories 2
#| eval: true
#| echo: true
nhanes <- read_excel( "/02_oridata/hanes_for_R.xlsx")
#| label: load directories 2
#| eval: true
#| echo: true
nhanes <- read_excel( "/02_oridata/hanes_for_R.xlsx")
nhanes <- read_excel( "/01_oridata/hanes_for_R.xlsx")
getwd()
nhanes <- read_excel( "01_oridata/hanes_for_R.xlsx")
nhanes <- read_excel( "01_oridata/hanes_for_R.xlsx")
getwd()
nhanes <- read_excel( "/Users/jb22m516/Documents/GitHub/getting_started_with_R/exercises/01_oridata/hanes_for_R.xlsx")
nhanes <- read_excel( "/01_oridata/nhanes_for_R.xlsx")
nhanes <- read_excel( "/Users/jb22m516/Documents/GitHub/getting_started_with_R/exercises/01_oridata/nhanes_for_R.xlsx")
file.path89
file.path()
d_proj
nhanes <- read_excel( file.path(d_proj, "/01_oridata/nhanes_for_R.xlsx")
nhanes <- read_excel( file.path(d_proj, "/01_oridata/nhanes_for_R.xlsx") )
nhanes <- read_excel( file.path(d_proj, "/01_oridata/nhanes_for_R.xlsx") )
d_data
?read_xpt
install.packages("haven")
#| eval: true
#| output: false
#| echo: true
#| label: solution import data
library(haven)
nhanes_body <- read_xpt(file.path(d_oridata, "BMX_J.xpt"))
#| eval: true
#| output: true
#| echo: true
# 1. Import the excel file Covid_19_vaccines_Basel into R
covid <- read_excel(file.path(d_oridata, "Covid19_vaccines_Basel.xlsx"))
# 2. How many columns does the dataset have?
# 6 columns
dim(covid)
ncol(covid)
# 3. How many rows?
# 915 rows
dim(covid)
nrow(covid)
# 4. Use one of the functions to get an overview of your data
str(covid) # option 1
glimpse(covid) # option 2
# 5. What is the median of vaccinations per day? (variable Vac_perday)
# 72 years
summary(covid)
# 6. How many missings do we have for booster vaccinations? (variable Total_vacbooster)
# 58
summary(covid)
# 7. What is the total number of vaccinations in line 14? (variable Total_vac)
# 15,806
head(covid, n = 14)
library(tidyverse)
?var_label()
library(labelled)
?table1
library(table1)
cars
iris
a_vector = c(1.23, 2.34, 6.21, 3.11, 3.412, 4.32, 5.922, 5.65)
# calculate the mean of a_vector
mean(a_vector)
# calculate the standard deviation of a_vector
sd(a_vector)
# calculate the maximal value of a_vector
max(a_vector)
# calculate the minimal value of a_vector
min(a_vector)
# calculate the Length of the vector
length(a_vector)
Reorder the columns to: SMQ040, RIAGENDR, SEQN.
